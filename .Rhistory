Periodo = first(periodo),
Tecnología = '4G o superiores'
) |> rename(No_Parroquias = grupo)
resume.claro
# Resume
resume.claro <- bd.prueba |> filter(Operadora == 'CONECEL') |>
group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
grupo = n(),
Periodo = first(periodo),
Tecnología = '4G o superiores'
) |> rename(No_Parroquias = grupo)
resume.claro
resume.movi <- bd.prueba |> filter(Operadora == 'OTECEL') |>
group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
grupo = n(),
Periodo = first(periodo),
Tecnología = '4G o superiores'
) |> rename(No_Parroquias = grupo)
resume.movi
source("C:/Users/bravi/projects/expansionSMAr/ResultadosExpansión/sinServicioPorOperadora.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/x_y_to_lat_education.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/x_y_to_lat_education.R", echo=TRUE)
View(df.education)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Wrangling_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónLatLong.xlsx')
View(db.schools)
db.schools.filt <- db.schools |> filter(conecel_lte == '<Nulo>')
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>' & conecel_lte == '-140')
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Wrangling_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónLatLong.xlsx')
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>', conecel_lte == '-140')
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>' & conecel_lte == -140)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Wrangling_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónLatLong.xlsx')
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>' & conecel_lte == -140)
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>')
View(db.schools.filt)
class(db.schools$conecel_lte)
help("filter")
db.schools.filt <- db.schools |>
filter(conecel_lte == '<Nulo>' | conecel_lte == '-140')
View(db.schools.filt)
db.schools.filt <- db.schools.filt |>
filter(otecel_lte == '<Nulo>' | otecel_lte == '-140')
db.schools.filt <- db.schools.filt |>
filter(cnt_lte == 'Sin cobertura 4G' | cnt_lte == '-140 ≤Cobertura con niveles < -120')
View(db.schools.filt)
# function to assign considering the probability
set.seed(2024)
addRandomBool <- function(df, p){
n <- ceiling(nrow(df) * p)
df$Operadora <- sample(rep(c("CONECEL","OTECEL"), times = c(n, nrow(df) - n)))
df
}
db.schools.ope <- Reduce(rbind,
lapply(
split(db.schools.filt, db.schools.filt$DPA_DESCAN),
addRandomBool,
p= 0.5))
View(db.schools.ope)
db.schools.conecel <- db.schools.ope |> filter(Operadora == 'CONECEL')
db.schools.otecel <- db.schools.ope |> filter(Operadora == 'OTECEL')
nrow(db.schools.conecel)
nrow(db.schools.otecel)
View(db.schools.otecel)
source("C:/Users/bravi/projects/expansionSMAr/establecimientos/educaciónPorOperadora.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/establecimientos/educaciónPorOperadora.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/establecimientos/educaciónPorOperadora.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/establecimientos/educaciónPorOperadora.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/establecimientos/educaciónPorOperadora.R", echo=TRUE)
2811/4
5512/4
703*4
703*3+702
2701/4
675*4
676+675*3
2811+2701
View(db.schools.otecel)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Data_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Data_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
#------------WRANGLING----------------------
# crossing bases
we <- apply(rbs.conecel, 1, function(x){
#new around
my_hashmap <- new.env()
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(db.schools[['LONGITUD']][1])
lat2 <- as.numeric(db.schools[['LATITUD']][1])
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
my_hashmap$distancia <- t
my_hashmap$lon <- x[['LONGITUD']]
my_hashmap$lat <- x[['LATITUD']]
my_hashmap
})
we.min <- min(we)
View(we)
we[[1]]
we[[1]]$distancia
rbs.conecel.4g <- rbs.conecel |> filter(TECNOLOGIA=='LTE')
calculo.cobertura <- function(db1, lon2, lat2){
wi <- apply(db1, 1, function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
t
})
wi
}
db.schools <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel.4g[1:2,], LONGITUD, LATITUD))
)
df <- data.frame(
distancia = sapply(we, function(env) env$distancia),
lon = sapply(we, function(env) env$lon),
lat = sapply(we, function(env) env$lat)
)
min_index <- which.min(df$distancia)
min_env <- we[[min_index]]
print(paste("Distancia mínima:", min_env$distancia))
print(paste("Longitud:", min_env$lon))
print(paste("Latitud:", min_env$lat))
calculo.cobertura <- function(db1, lon2, lat2){
wi <- apply(db1, 1, function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
t
})
wi
}
db.schools <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel, LONGITUD, LATITUD))
)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
compute2 <- function(lon2, lat2){
tibble(Longitud = llon2, Latitud = lat2)
}
map_df(rbs.conecel, compute2(rbs.conecel$LONGITUD, rbs.conecel$LATITUD))
compute2 <- function(lon2, lat2){
tibble(Longitud = lon2, Latitud = lat2)
}
map_df(rbs.conecel, compute2(rbs.conecel$LONGITUD, rbs.conecel$LATITUD))
compute2 <- function(x){
tibble(Longitud = x[['LONGITUD']], Latitud = x[['LATITUD']])
}
map_df(rbs.conecel, compute2)
View(rbs.conecel)
compute2 <- function(x){
tibble(Longitud = x[['LONGITUD']])
}
map_df(rbs.conecel, compute2)
compute2 <- function(x){
tibble(Longitud = x[['LONGITUD']])
}
map_df(rbs.conecel$LONGITUD, compute2)
compute2 <- function(x){
tibble(Longitud = x[['LONGITUD']])
}
map_df(list(rbs.conecel), compute2)
compute2 <- function(x){
tibble(Longitud = x[['LONGITUD']])
}
result2 <- map_df(list(rbs.conecel), compute2)
View(result2)
list(rbs.conecel)
compute2 <- function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
tibble(Longitud = lon1, Latitud = lat1)
}
result2 <- map_df(list(rbs.conecel), compute2)
View(result2)
lon2 <- as.numeric(db.schools[['LONGITUD']][1])
lat2 <- as.numeric(db.schools[['LATITUD']][1])
lon2 <- as.numeric(db.schools[['LONGITUD']][1])
lat2 <- as.numeric(db.schools[['LATITUD']][1])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
tibble(Longitud = lon1, Latitud = lat1)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lon2 = lat2)
lon2 <- as.numeric(db.schools[['LONGITUD']][1])
lat2 <- as.numeric(db.schools[['LATITUD']][1])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
tibble(Longitud = lon1, Latitud = lat1)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
View(result2)
lon2 <- as.numeric(db.schools[['LONGITUD']][1])
lat2 <- as.numeric(db.schools[['LATITUD']][1])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- 2000
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- sum(lon1, lat1, lon2, lat2)
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
View(result2)
lon2 <- (db.schools[['LONGITUD']][1])
lat2 <- (db.schools[['LATITUD']][1])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
#--------other way-------------
lon2 <- (db.schools[['LONGITUD']])
lat2 <- (db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = lon2, lat2 = lat2)
#--------other way-------------
lon2 <- (db.schools[['LONGITUD']])
lat2 <- (db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']], lat2 = db.schools[['LATITUD']])
#--------other way-------------
lon2 <- (db.schools[['LONGITUD']])
lat2 <- (db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = t)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']], lat2 = db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ min(distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']], lat2 = db.schools[['LATITUD']])
db.schools[['LONGITUD']]
db.schools[['LONGITUD']][1]
#--------other way-------------
lon2 <- (db.schools[['LONGITUD']])
lat2 <- (db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ min(distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
View(result2)
#--------other way-------------
lon2 <- (db.schools[['LONGITUD']])
lat2 <- (db.schools[['LATITUD']])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- distHaversine(c(lon1, lat1), c(lon2, lat2)) / 1000
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ min(distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
View(result2)
compute2 <- function(x, lon2, lat2){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ (distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
min(result2$distancia)
min(result2$distancia)
rbs.conecel[1:5,]
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
db.schools <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:5,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
View(db.schools)
db.schools <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:5,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
db.schools2 <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:5,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
db.schools2 <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
db.schools2 <- db.schools |>
mutate(resultado = min(map_df(list(rbs.conecel[1:2,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
db.schools2 <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:2,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Data_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
calculo.cobertura <- function(db1, lon2, lat2){
wi <- apply(db1, 1, function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
t
})
wi
}
db.schools1 <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], LONGITUD, LATITUD))
)
calculo.cobertura <- function(db1, lon2, lat2){
wi <- apply(db1, 1, function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
t
})
wi
}
db.schools1 <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], LONGITUD, LATITUD))
)
compute2 <- function(x, lon2, lat2) {
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ (distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
min(result2$distancia)
db.schools2 <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:2,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
