)
compute2 <- function(x, lon2, lat2) {
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Calculate distance
distances <- map2_dbl(lon1, lat1, ~ (distHaversine(c(.x, .y), c(lon2, lat2)) / 1000))
tibble(Longitud = lon1, Latitud = lat1, distancia = distances)
}
result2 <- map_df(list(rbs.conecel), compute2, lon2 = db.schools[['LONGITUD']][1], lat2 = db.schools[['LATITUD']][1])
min(result2$distancia)
db.schools2 <- db.schools |>
rowwise() |>
mutate(resultado = min(map_df(list(rbs.conecel[1:2,]), compute2, lon2 = LONGITUD, lat2 = LATITUD)$distancia)
)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
library(purrr)
library(geosphere)
#________Data_________
df.poblacion <- read_excel('poblacion.xlsx')
rbs.conecel <- read_excel('ResultGeoTOTAL/dbconecel.xlsx')
db.schools <- read_excel('establecimientos/educaciónConecel.xlsx')
# FUNCTION to detect min coverage
calculo.cobertura <- function(db1, lon2, lat2){
wi <- apply(db1, 1, function(x){
lon1 <- as.numeric(x[['LONGITUD']])
lat1 <- as.numeric(x[['LATITUD']])
# Define lon2 and lat2 inside the function to create vectors
lon2 <- as.numeric(lon2)
lat2 <- as.numeric(lat2)
# Calculate distance
t <- distHaversine(c(lon1, lat1), c(lon2, lat2))
t <- t / 1000
t
})
wi
}
db.schools1 <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:20,], LONGITUD, LATITUD))
)
View(db.schools)
split(db.schools, db.schools$DPA_CANTON)
split(db.schools, db.schools$DPA_PROVIN)
View(bd.prueba)
split(db.schools[1:20,], db.schools$DPA_PROVIN)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], LONGITUD, LATITUD))
)
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools[1:20,], db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], db[['LONGITUD']], db[['LATITUD']]))
)
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools[1:20,], db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], db[['LONGITUD']], db[['LATITUD']]))
)
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel, db[['LONGITUD']], db[['LATITUD']]))
)
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = sum(db[['LONGITUD']], db[['LATITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
View(bd.prueba1)
View(bd.prueba1)
View(bd.prueba1)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(db[['LONGITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = min(db[['LONGITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
View(bd.prueba1)
func.principal <- function(db){
db |>
rowwise() |>
mutate(resultado = (db[['LONGITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db){
db |>
mutate(resultado = (db[['LONGITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
View(bd.prueba1)
func.principal <- function(db){
db |>
mutate(resultado = paste(db[['LONGITUD']], db[['LATITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db.escuelas){
db.escuelas |>
mutate(resultado = paste(db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal)
)
func.principal <- function(db.escuelas, db2){
db.escuelas |>
mutate(resultado = paste(db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
func.principal <- function(db.escuelas, db2){
db.escuelas |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']])))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
func.principal <- function(db.escuelas, db2){
db.escuelas |>
mutate(resultado = min(calculo.cobertura(db2, db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']])))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
func.principal <- function(db.escuelas, db2){
db.escuelas |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(db2, db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']])))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
func.principal <- function(db.escuelas, db2){
db.escuelas$Resultado <- min(calculo.cobertura(db2, LONGITUD, LATITUD))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
func.principal <- function(db.escuelas, db2){
db.escuelas$Resultado <- min(calculo.cobertura(db2, db.escuelas[['LONGITUD']], db.escuelas[['LATITUD']]))
}
bd.prueba1 <- Reduce(rbind,
lapply(split(db.schools, db.schools$DPA_PROVIN), func.principal, rbs.conecel[1:2,])
)
db.schools1 <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel[1:2,], LONGITUD, LATITUD))
)
db.schools1 <- db.schools |>
rowwise() |>
mutate(resultado = min(calculo.cobertura(rbs.conecel, LONGITUD, LATITUD))
)
View(db.schools1)
#Export tibble with companies classified
writexl::write_xlsx(db.schools1, 'coberturaEducación/educaciónConecelCobertura.xlsx')
source("C:/Users/bravi/projects/expansionSMAr/coverageCLARO.R", echo=TRUE)
library(tidyverse)
library(leaflet)
library(scales)
library(leaflet.extras)
library(hexbin)
library(leaflethex)
library(readxl)
library(here)
library(writexl)
source(here::here('helpers/grades_to_decimal.R'))
source(here::here('helpers/join_parroquias.R'))
source(here::here('helpers/propagation.R'))
#________Wrangling_________
df.poblacion <- read_excel('poblacion.xlsx')
db.otecel.GSM850 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'GSM 850')
db.otecel.UMTS850 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'UMTS 850')
db.otecel.LTE850 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'LTE 850')
db.otecel.GSM1900 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'GSM 1900')
db.otecel.UMTS1900 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'UMTS 1900')
db.otecel.LTE1900 <- read_excel('RBS/OTECEL-RBS diciembre 2023.xlsx',
sheet = 'LTE 1900')
colnames(db.otecel.GSM850) <- db.otecel.GSM850[1,]
db.otecel.GSM850 <- db.otecel.GSM850[-1,]
db.otecel.GSM850 <- db.otecel.GSM850[,c(2,3,4,8,11,12,13,14,15,16,17)]
colnames(db.otecel.UMTS850) <- db.otecel.UMTS850[1,]
db.otecel.UMTS850 <- db.otecel.UMTS850[-1,]
db.otecel.UMTS850 <- db.otecel.UMTS850[,c(2,3,4,8,11,12,13,14,15,16,17)]
colnames(db.otecel.LTE850) <- db.otecel.LTE850[1,]
db.otecel.LTE850 <- db.otecel.LTE850[-1,]
db.otecel.LTE850 <- db.otecel.LTE850[,c(2,3,4,8,11,12,13,14,15,16,17)]
colnames(db.otecel.GSM1900) <- db.otecel.GSM1900[1,]
db.otecel.GSM1900 <- db.otecel.GSM1900[-1,]
db.otecel.GSM1900 <- db.otecel.GSM1900[,c(2,3,4,8,11,12,13,14,15,16,17)]
colnames(db.otecel.UMTS1900) <- db.otecel.UMTS1900[1,]
db.otecel.UMTS1900 <- db.otecel.UMTS1900[-1,]
db.otecel.UMTS1900 <- db.otecel.UMTS1900[,c(2,3,4,8,11,12,13,14,15,16,17)]
colnames(db.otecel.LTE1900) <- db.otecel.LTE1900[1,]
db.otecel.LTE1900 <- db.otecel.LTE1900[-1,]
db.otecel.LTE1900 <- db.otecel.LTE1900[,c(2,3,4,8,11,12,13,14,15,16,17)]
#---Change LATITUDE---
# GSM 850
db.otecel.GSM850 <- db.otecel.GSM850 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.GSM850 <- grades_to_decimal(db.otecel.GSM850$LATITUD)
db.otecel.GSM850$LATITUD <- lat.otecel.GSM850
# UMTS 850
db.otecel.UMTS850 <- db.otecel.UMTS850 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.UMTS850 <- grades_to_decimal(db.otecel.UMTS850$LATITUD)
db.otecel.UMTS850$LATITUD <- lat.otecel.UMTS850
# LTE 850
db.otecel.LTE850 <- db.otecel.LTE850 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.LTE850 <- grades_to_decimal(db.otecel.LTE850$LATITUD)
db.otecel.LTE850$LATITUD <- lat.otecel.LTE850
# GSM 1900
db.otecel.GSM1900 <- db.otecel.GSM1900 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.GSM1900 <- grades_to_decimal(db.otecel.GSM1900$LATITUD)
db.otecel.GSM1900$LATITUD <- lat.otecel.GSM1900
# UMTS 1900
db.otecel.UMTS1900 <- db.otecel.UMTS1900 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.UMTS1900 <- grades_to_decimal(db.otecel.UMTS1900$LATITUD)
db.otecel.UMTS1900$LATITUD <- lat.otecel.UMTS1900
# LTE 1900
db.otecel.LTE1900 <- db.otecel.LTE1900 |> mutate(LATITUD = (strsplit(LATITUD, "[°'']")))
lat.otecel.LTE1900 <- grades_to_decimal(db.otecel.LTE1900$LATITUD)
db.otecel.LTE1900$LATITUD <- lat.otecel.LTE1900
#---Change LONGUITUDE---
# GSM 850
db.otecel.GSM850 <- db.otecel.GSM850 |> mutate(LONGITUD = (strsplit(LONGITUD, "[°'']")))
long1 <- grades_to_decimal(db.otecel.GSM850$LONGITUD)
db.otecel.GSM850$LONGITUD <- long1
# UMTS 850
db.otecel.UMTS850 <- db.otecel.UMTS850 |> mutate(LONGITUD  = (strsplit(LONGITUD, "[°'']")))
long2 <- grades_to_decimal(db.otecel.UMTS850$LONGITUD)
db.otecel.UMTS850$LONGITUD <- long2
# LTE 850
db.otecel.LTE850 <- db.otecel.LTE850 |> mutate(LONGITUD = (strsplit(LONGITUD, "[°'']")))
long3 <- grades_to_decimal(db.otecel.LTE850$LONGITUD)
db.otecel.LTE850$LONGITUD <- long3
# GSM 1900
db.otecel.GSM1900 <- db.otecel.GSM1900 |> mutate(LONGITUD = (strsplit(LONGITUD, "[°'']")))
long4 <- grades_to_decimal(db.otecel.GSM1900$LONGITUD)
db.otecel.GSM1900$LONGITUD <- long4
# UMTS 1900
db.otecel.UMTS1900 <- db.otecel.UMTS1900 |> mutate(LONGITUD = (strsplit(LONGITUD, "[°'']")))
long5 <- grades_to_decimal(db.otecel.UMTS1900$LONGITUD)
db.otecel.UMTS1900$LONGITUD <- long5
# LTE 1900
db.otecel.LTE1900 <- db.otecel.LTE1900 |> mutate(LONGITUD = (strsplit(LONGITUD, "[°'']")))
long6 <- grades_to_decimal(db.otecel.LTE1900$LONGITUD)
db.otecel.LTE1900$LONGITUD <- long6
colnames(db.otecel.GSM850)[5] <- "DPA"
colnames(db.otecel.UMTS850)[5] <- "DPA"
colnames(db.otecel.LTE850)[5] <- "DPA"
colnames(db.otecel.GSM1900)[5] <- "DPA"
colnames(db.otecel.UMTS1900)[5] <- "DPA"
colnames(db.otecel.LTE1900)[5] <- "DPA"
colnames(db.otecel.GSM850) <- colnames(db.otecel.UMTS850)
colnames(db.otecel.LTE850) <- colnames(db.otecel.UMTS850)
colnames(db.otecel.GSM1900) <- colnames(db.otecel.UMTS850)
colnames(db.otecel.UMTS1900) <- colnames(db.otecel.UMTS850)
colnames(db.otecel.LTE1900) <- colnames(db.otecel.UMTS850)
db.otecel <- rbind(db.otecel.GSM850,
db.otecel.UMTS850,
db.otecel.LTE850,
db.otecel.GSM1900,
db.otecel.UMTS1900,
db.otecel.LTE1900
)
#---Join to base poblacion to determinate if is URBAN, RURAL, ETC
tipoOtecel <- join_parroquias(db.otecel$DPA, df.poblacion)
db.otecel <- cbind(db.otecel, as.matrix(tipoOtecel))
colnames(db.otecel)[ncol(db.otecel)] <- "tipo"
# to suppress duplicate to sector x y z
db.otecel <- db.otecel |> group_by(`NOMBRE DE LA RADIOBASE`) |>
distinct()
#Add Propagation radio[Km]
colnames(db.otecel)[2] <- "banda"
db.otecel <- db.otecel |>
mutate(coverage = ifelse(tipo=='RURAL' & banda=='850', rural850,
ifelse(banda=='850', urbana850,
ifelse(tipo=='RURAL' & banda=='1900', rural1900,
ifelse(banda=='1900', urbana1900,
ifelse(tipo=='RURAL' & banda=='1700', ruralAWS, urbanaAWS))))))
db.otecel2G <- db.otecel |> filter(TECNOLOGIA=='GSM')
db.otecel3G <- db.otecel |> filter(TECNOLOGIA=='UMTS')
db.otecel4G <- db.otecel |> filter(TECNOLOGIA=='LTE')
#----Ploting-----
map <- leaflet() %>% addTiles()
# Create a leaflet map
map <- map %>%
addCircles(
data = db.otecel2G,
lng = ~LONGITUD,
lat = ~LATITUD,
radius = ~coverage * 1000, # Convert diameter from km to meters
color = "#FF9209",
fillOpacity = 0.2,
group = "2G",
weight = 0  # Set weight to 0 to remove the border
)
map <- map %>%
addCircles(
data = db.otecel3G,
lng = ~LONGITUD,
lat = ~LATITUD,
radius = ~coverage * 1000, # Convert diameter from km to meters
color = "blue",
fillOpacity = 0.2,
group = "3G",
weight = 0  # Set weight to 0 to remove the border
)
map <- map %>%
addCircles(
data = db.otecel4G,
lng = ~LONGITUD,
lat = ~LATITUD,
radius = ~coverage * 1000, # Convert diameter from km to meters
color = "red",
fillOpacity = 0.2,
group = "4G",
weight = 0  # Set weight to 0 to remove the border
)
# Add the layers control
map %>% addLayersControl(
overlayGroups = c("2G", "3G", "4G"),
options = layersControlOptions(collapsed = FALSE)
)
# Export db Otecel
writexl::write_xlsx(db.otecel, './ResultGeoTOTAL/dfotecel.xlsx')
# Export db Otecel
writexl::write_xlsx(db.otecel, './ResultGeoTOTAL/dbotecel.xlsx')
View(df.total)
View(df.total)
library(tidyverse)
library(dplyr)
library(readxl)
library(here)
library(writexl)
library(stringr)
#---Data----
db.fibra.claro <- read_excel('nodos_fibra/nodos_fibra_conecel.xlsx')
db.fibra.claro <- db.fibra.claro |> group_by(cantón) |>
distinct()
View(db.fibra.claro)
View(db.fibra.claro)
class(db.fibra.claro)
# all strings in UPPER CASE
db.fibra.claro <- db.fibra.claro |>
mutate(
cantón = toupper(cantón)
)
# all strings without accents
db.fibra.claro <- db.fibra.claro |>
mutate(
cantón = stri_trans_general(cantón, "Latin-ASCII")
)
library(stringi) # to remove accents
# all strings without accents
db.fibra.claro <- db.fibra.claro |>
mutate(
cantón = stri_trans_general(cantón, "Latin-ASCII")
)
# all strings without extra spaces
db.fibra.claro <- db.fibra.claro |>
mutate(
cantón = str_squish(cantón)
)
db.edu.claro <- read_excel('coberturaEducación/educaciónConecelCobertura.xlsx')
View(db.edu.claro)
source("C:/Users/bravi/projects/expansionSMAr/coberturaEducación/fibraClaro.R", echo=TRUE)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
col.fibra <- lapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
db.edu.claro <- db.edu.claro |>
mutate(
DPA_DESCAN = str_squish(DPA_DESCAN)
)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
col.fibra <- sapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
col.fibra <- apply(db.edu.claro$DPA_DESCAN, 1, join_places_fiber, y = db.fibra.claro$cantón)
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- lapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
col.fibra
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- lapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
View(col.fibra)
col.fibra[[1]]
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- sapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- apply(db.edu.claro$DPA_DESCAN, 1, join_places_fiber, y = db.fibra.claro$cantón)
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- sapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
View(col.fibra)
join_places_fiber <- function(x, y){
ifelse(x == y,1,0)
}
col.fibra <- lapply(db.edu.claro$DPA_DESCAN, join_places_fiber, y = db.fibra.claro$cantón)
View(col.fibra)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
col.fibra <- apply(db.edu.claro, 1, join_places_fiber, y = db.fibra.claro)
View(col.fibra)
db.edu.claro <- db.edu.claro |>
mutate(
DPA_DESCAN = str_squish(DPA_DESCAN)
)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
matrix.fibra <- apply(db.edu.claro, 1, join_places_fiber, y = db.fibra.claro)
db.edu.claro <- db.edu.claro |>
mutate(
DPA_DESCAN = str_squish(DPA_DESCAN)
)
join_places_fiber <- function(x, y){
ifelse(x[['DPA_DESCAN']] == y[['cantón']],1,0)
}
matrix.fibra <- apply(db.edu.claro, 1, join_places_fiber, y = db.fibra.claro)
col.fibra <- apply(matrix.fibra, 2, sum)
col.fibra
list(col.fibra)
col.fibra[[1]]
db.edu.claro$acceso_fibra <- col.fibra
View(db.edu.claro)
View(db.fibra.claro)
db.edu.claro <- db.edu.claro[order(-db.edu.claro$resultado),]
rep('hola', times=3)
col.fases <- c(
rep("Fase 1", times = 702),
rep("Fase 2", times = 703),
rep("Fase 3", times = 703),
rep("Fase 4", times = 703),
)
col.fases <- c(
rep("Fase 1", times = 702),
rep("Fase 2", times = 703),
rep("Fase 3", times = 703),
rep("Fase 4", times = 703)
)
col.fases
db.edu.claro$fases <- col.fases
source(here::here('costeo/costosUnidad.R'))
micro.max.15
micro.min.15
db.edu.claro <- db.edu.claro |>
mutate(costeo = ifelse(acceso_fibra == 0 & resultado > 100, 2*micro.min.15,
ifelse(acceso_fibra == 0 & resultado < 100, micro.min.15,
ifelse(acceso_fibra == 1, fibeq.min.15 + resultado*fibkm.min.15, 0))
))
sum(db.edu.claro$costeo)
sum(db.edu.claro$costeo)
#Export tibble with companies classified
writexl::write_xlsx(db.edu.claro, 'costeo/educaciónConecelCosteado.xlsx')
