rbs2G.Conecel <- df.total |> filter(TIPO != 'URBANO') |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
View(rbs2G.Conecel)
sum(rbs2G.Conecel$CONECEL_2G)
prueba <- df.total |> ilter(TIPO != 'URBANO')
prueba <- df.total |> filter(TIPO != 'URBANO')
sum(prueba$CONECEL_2G)
prueba <- df.total
sum(prueba$CONECEL_2G)
df.total |> filter(TIPO == 'URBANO')
df.total |> filter(TIPO == 'URBANO', CONECEL_2G !=0)
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
sum(rbs2G.Conecel$CONECEL_2G)
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel2G4G.R", echo=TRUE)
View(rbs2G.Conecel)
View(dataFinal)
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 5),])
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G > 0.5)
View(rbs2G.Conecel)
# ----------Rating 2G radio bases to 4G ----------------
df.2g <- rbs2G.Conecel |> select(pob2022, porc.2G.4G)
# Replace NA with 0
df.2g[is.na(df.2g)] <- 0
row.names(df.2g) <- rbs2G.Conecel$DPA_PARROQ
# normalize data
df.2g <- scale(df.2g)
head(df.2g)
sapply(df.2g, class)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df.2g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# MODEL
set.seed(44)
k1 <- kmeans(df.2g, centers = 5, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df.2g)
dataFinal <- rbs2G.Conecel |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
count(dataFinal[which(dataFinal$cluster == 6),])
count(dataFinal[which(dataFinal$cluster == 7),])
count(dataFinal[which(dataFinal$cluster == 8),])
count(dataFinal[which(dataFinal$cluster == 9),])
count(dataFinal[which(dataFinal$cluster == 10),])
rbs2g.cluster1 <- sum(dataFinal |> filter(cluster ==1) |> select(CONECEL_2G))
rbs2g.cluster2 <- sum(dataFinal |> filter(cluster ==2) |> select(CONECEL_2G))
rbs2g.cluster3 <- sum(dataFinal |> filter(cluster ==3) |> select(CONECEL_2G))
rbs2g.cluster4 <- sum(dataFinal |> filter(cluster ==4) |> select(CONECEL_2G))
rbs2g.cluster5 <- sum(dataFinal |> filter(cluster ==5) |> select(CONECEL_2G))
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4 + rbs2g.cluster5)
View(dataFinal)
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel2G4G.R", echo=TRUE)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
View(rbs2G.Conecel)
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G >= 0.5)
# ----------Rating 2G radio bases to 4G ----------------
df.2g <- rbs2G.Conecel |> select(pob2022, porc.2G.4G)
# Replace NA with 0
df.2g[is.na(df.2g)] <- 0
row.names(df.2g) <- rbs2G.Conecel$DPA_PARROQ
# normalize data
df.2g <- scale(df.2g)
head(df.2g)
sapply(df.2g, class)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df.2g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# MODEL
set.seed(44)
k1 <- kmeans(df.2g, centers = 5, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df.2g)
dataFinal <- rbs2G.Conecel |> mutate(cluster = k1$cluster)
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4 + rbs2g.cluster5)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
rbs2g.cluster1 <- sum(dataFinal |> filter(cluster ==1) |> select(CONECEL_2G))
rbs2g.cluster2 <- sum(dataFinal |> filter(cluster ==2) |> select(CONECEL_2G))
rbs2g.cluster3 <- sum(dataFinal |> filter(cluster ==3) |> select(CONECEL_2G))
rbs2g.cluster4 <- sum(dataFinal |> filter(cluster ==4) |> select(CONECEL_2G))
rbs2g.cluster5 <- sum(dataFinal |> filter(cluster ==5) |> select(CONECEL_2G))
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4 + rbs2g.cluster5)
View(dataFinal)
sum(dataFinal$CONECEL_2G)
nrow(dataFinal)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G >= 0.5)
# ----------Rating 2G radio bases to 4G ----------------
df.2g <- rbs2G.Conecel |> select(pob2022, porc.2G.4G)
# Replace NA with 0
df.2g[is.na(df.2g)] <- 0
row.names(df.2g) <- rbs2G.Conecel$DPA_PARROQ
# normalize data
df.2g <- scale(df.2g)
head(df.2g)
sapply(df.2g, class)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df.2g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# MODEL
set.seed(446)
k1 <- kmeans(df.2g, centers = 4, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df.2g)
dataFinal <- rbs2G.Conecel |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
rbs2g.cluster1 <- sum(dataFinal |> filter(cluster ==1) |> select(CONECEL_2G))
rbs2g.cluster2 <- sum(dataFinal |> filter(cluster ==2) |> select(CONECEL_2G))
rbs2g.cluster3 <- sum(dataFinal |> filter(cluster ==3) |> select(CONECEL_2G))
rbs2g.cluster4 <- sum(dataFinal |> filter(cluster ==4) |> select(CONECEL_2G))
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4 + rbs2g.cluster5)
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4)
View(dataFinal)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G > 0.5)
# ----------Rating 2G radio bases to 4G ----------------
df.2g <- rbs2G.Conecel |> select(pob2022, porc.2G.4G)
# Replace NA with 0
df.2g[is.na(df.2g)] <- 0
row.names(df.2g) <- rbs2G.Conecel$DPA_PARROQ
# normalize data
df.2g <- scale(df.2g)
head(df.2g)
sapply(df.2g, class)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df.2g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# MODEL
set.seed(446)
k1 <- kmeans(df.2g, centers = 5, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df.2g)
dataFinal <- rbs2G.Conecel |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
rbs2g.cluster1 <- sum(dataFinal |> filter(cluster ==1) |> select(CONECEL_2G))
rbs2g.cluster2 <- sum(dataFinal |> filter(cluster ==2) |> select(CONECEL_2G))
rbs2g.cluster3 <- sum(dataFinal |> filter(cluster ==3) |> select(CONECEL_2G))
rbs2g.cluster4 <- sum(dataFinal |> filter(cluster ==4) |> select(CONECEL_2G))
rbs2g.cluster5 <- sum(dataFinal |> filter(cluster ==5) |> select(CONECEL_2G))
sum(rbs2g.cluster1+ rbs2g.cluster2 + rbs2g.cluster3 + rbs2g.cluster4 + rbs2g.cluster5)
# testing rbs 3G
ifelse(sum(df.total |> select(CONECEL_3G)) == 2986, 'TRUE', 'ERROR')
View(df.total)
df.total[which(is.na(df.total[, 35])), 35] = 0
# testing rbs 3G
ifelse(sum(df.total |> select(CONECEL_3G)) == 2986, 'TRUE', 'ERROR')
rbs3G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_3G !=0) |>
mutate(porc.3G.4G = CONECEL_3G / (CONECEL_3G + CONECEL_4G))
View(rbs3G.Conecel)
View(rbs3G.Conecel)
rbs3G.Conecel <- rbs3G.Conecel[, -c(6:34, 37, 38)]
sum(rbs3G.Conecel$CONECEL_3G)
rbs3G.Conecel <- rbs3G.Conecel |> filter(porc.3G.4G > 0.5)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
df.total[which(is.na(df.total[, 35])), 35] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G > 0.5)
# testing rbs 3G
ifelse(sum(df.total |> select(CONECEL_3G)) == 2986, 'TRUE', 'ERROR')
rbs3G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_3G !=0) |>
mutate(porc.3G.4G = CONECEL_3G / (CONECEL_3G + CONECEL_4G))
rbs3G.Conecel <- rbs3G.Conecel[, -c(6:34, 37, 38)]
rbs3G.Conecel <- rbs3G.Conecel |> filter(porc.3G.4G >= 0.5)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
df.total[which(is.na(df.total[, 35])), 35] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G > 0.5)
# testing rbs 3G
ifelse(sum(df.total |> select(CONECEL_3G)) == 2986, 'TRUE', 'ERROR')
rbs3G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_3G !=0) |>
mutate(porc.3G.4G = CONECEL_3G / (CONECEL_3G + CONECEL_4G))
rbs3G.Conecel <- rbs3G.Conecel[, -c(6:34, 37, 38)]
rbs3G.Conecel <- rbs3G.Conecel |> filter(porc.3G.4G > 0.5)
# ----------Rating 3G radio bases to 4G ----------------
df.3g <- rbs3G.Conecel |> select(pob2022, porc.3G.4G)
# Replace NA with 0
df.3g[is.na(df.3g)] <- 0
row.names(df.3g) <- rbs3G.Conecel$DPA_PARROQ
# normalize data
df.3g <- scale(df.3g)
head(df.3g)
sapply(df.3g, class)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df.3g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
#----Read Total file-------
df.total <- read_excel('dftotalSMA.xlsx')
str(df.total)
df.total[which(is.na(df.total[, 34])), 34] = 0
df.total[which(is.na(df.total[, 35])), 35] = 0
# testing rbs 2G
ifelse(sum(df.total |> select(CONECEL_2G)) == 2130, 'TRUE', 'ERROR')
rbs2G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_2G !=0) |>
mutate(porc.2G.4G = CONECEL_2G / (CONECEL_2G + CONECEL_4G))
rbs2G.Conecel <- rbs2G.Conecel[, -c(6:33, 35, 37, 38)]
rbs2G.Conecel <- rbs2G.Conecel |> filter(porc.2G.4G > 0.5)
# testing rbs 3G
ifelse(sum(df.total |> select(CONECEL_3G)) == 2986, 'TRUE', 'ERROR')
rbs3G.Conecel <- df.total |>
select(-c(OTECEL_2G, OTECEL_3G, OTECEL_4G, CNT_3G, CNT_4G, TOTAL)) |>
filter(CONECEL_3G !=0) |>
mutate(porc.3G.4G = CONECEL_3G / (CONECEL_3G + CONECEL_4G))
rbs3G.Conecel <- rbs3G.Conecel[, -c(6:34, 37, 38)]
rbs3G.Conecel <- rbs3G.Conecel |> filter(porc.3G.4G > 0.5)
# ----------Rating 3G radio bases to 4G ----------------
df.3g <- rbs3G.Conecel |> select(pob2022, porc.3G.4G)
# Replace NA with 0
df.3g[is.na(df.3g)] <- 0
row.names(df.3g) <- rbs3G.Conecel$DPA_PARROQ
# normalize data
df.3g <- scale(df.3g)
head(df.3g)
sapply(df.3g, class)
#---NBUST METHOD---
set.seed(12345)
res<-NbClust(df.3g, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
set.seed(666)
k1 <- kmeans(df.3g, centers = 3, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df.3g)
dataFinal3 <- rbs3G.Conecel |> mutate(cluster = k1$cluster)
#testing
count(dataFinal3[which(dataFinal3$cluster == 1),])
count(dataFinal3[which(dataFinal3$cluster == 2),])
count(dataFinal3[which(dataFinal3$cluster == 3),])
rbs3g.cluster1 <- sum(dataFinal3 |> filter(cluster ==1) |> select(CONECEL_3G))
rbs3g.cluster2 <- sum(dataFinal3 |> filter(cluster ==2) |> select(CONECEL_3G))
rbs3g.cluster3 <- sum(dataFinal3 |> filter(cluster ==3) |> select(CONECEL_3G))
sum(rbs3g.cluster1+ rbs3g.cluster2 + rbs3g.cluster3)
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel2G4G.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel_to_4G.R", echo=TRUE)
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel_to_4G.R", echo=TRUE)
View(dataFinal2)
View(dataFinal3)
View(df.total)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
View(resumen)
View(dataFinal)
library(readxl)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(shiny)
library(shinyjs)
library(rsconnect)
library(DT)
library(here)
library(readxl)
library(stringr)
library(highcharter)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(NbClust) # to find the ideal number of clusters
library(writexl)
library(modelsummary)
#----Read paqquias without service-------
dfsinservicio <- read_excel('dfsinservicioSMA.xlsx')
str(dfsinservicio)
df <- dfsinservicio |> select(pob2022, cuentasInt, lineStf)
# Replace NA with 0
df[is.na(df)] <- 0
row.names(df) <- dfsinservicio$DPA_PARROQ
# normalize data
df <- scale(df)
head(df)
#Check for data-types of columns
#kmeans can only be used on numerical columns, because it needs
#to compute the mean.
sapply(df, class)
# set up the seed
set.seed(123)
#----DETERMING OPTIMAL CLUSTERS----
# Elbow Method
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
fviz_nbclust(df, kmeans, method = "wss")
#Average Silhouette Method
fviz_nbclust(df, kmeans, method = "silhouette")
#Gap Statistic Method
# compute gap statistic
set.seed(123)
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
#  According to the majority rule, the best number of clusters is  4
# adding nstart = 25 will generate 25 initial configurations.
#This approach is often recommended.
set.seed(44)
k1 <- kmeans(df, centers = 10, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df)
dataFinal <- dfsinservicio |> mutate(cluster = k1$cluster)
View(df.total)
