count(dataFinal[which(dataFinal$cluster == 6),])
count(dataFinal[which(dataFinal$cluster == 7),])
count(dataFinal[which(dataFinal$cluster == 8),])
count(dataFinal[which(dataFinal$cluster == 9),])
count(dataFinal[which(dataFinal$cluster == 10),])
dataFinal <- dataFinal |>
mutate(grupo = ifelse(cluster == 1 | cluster == 2 | cluster == 6 | cluster == 7 | cluster == 8 | cluster == 10, "G1",
ifelse(cluster == 3, "G2",
ifelse(cluster == 4 , "G3",
ifelse(cluster == 5 | cluster == 9, "G4", "G1")))))
dataFinal <- dataFinal |>
mutate(periodo = ifelse(grupo == "G1", "1-2 años",
ifelse(grupo == "G2", "3-4 años",
ifelse(grupo == "G3", "5-6 años",
ifelse(grupo == "G4", "7-8 años", "1-2 años")))))
# Number sities Group 1
nrow(dataFinal |> filter(grupo == "G1"))
# Number sities Group 2
nrow(dataFinal |> filter(grupo == "G2"))
# Number sities Group 3
nrow(dataFinal |> filter(grupo == "G3"))
# Number sities Group 4
nrow(dataFinal |> filter(grupo == "G4"))
dataFinal <- dataFinal |> select(-c(8))
sum(dataFinal$pob2022)
#Export tibble witout mobile service telecom
writexl::write_xlsx(dataFinal, './ResultadosExpansión/sinservicioClasificado.xlsx')
source("C:/Users/bravi/projects/expansionSMAr/ratingConecel2G4G.R", echo=TRUE)
View(dftotal)
View(dftotal)
View(dfsinservicio)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
View(dataFinal)
set.seed(44)
k1 <- kmeans(df, centers = 10, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df)
dataFinal <- dfsinservicio |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
count(dataFinal[which(dataFinal$cluster == 6),])
count(dataFinal[which(dataFinal$cluster == 7),])
count(dataFinal[which(dataFinal$cluster == 8),])
count(dataFinal[which(dataFinal$cluster == 9),])
count(dataFinal[which(dataFinal$cluster == 10),])
dataFinal <- dataFinal |>
mutate(grupo = ifelse(cluster == 1 | cluster == 2 | cluster == 6 | cluster == 7 | cluster == 8 | cluster == 10, "G4",
ifelse(cluster == 3, "G2",
ifelse(cluster == 4 , "G3",
ifelse(cluster == 5 | cluster == 9, "G1", "G1")))))
dataFinal <- dataFinal |>
mutate(periodo = ifelse(grupo == "G1", "1-2 años",
ifelse(grupo == "G2", "3-4 años",
ifelse(grupo == "G3", "5-6 años",
ifelse(grupo == "G4", "7-8 años", "1-2 años")))))
# Number sities Group 1
nrow(dataFinal |> filter(grupo == "G1"))
# Number sities Group 2
nrow(dataFinal |> filter(grupo == "G2"))
# Number sities Group 3
nrow(dataFinal |> filter(grupo == "G3"))
# Number sities Group 4
nrow(dataFinal |> filter(grupo == "G4"))
dataFinal <- dataFinal |> select(-c(8, 12))
#Export tibble witout mobile service telecom
writexl::write_xlsx(dataFinal, './ResultadosExpansión/sinservicioClasificado.xlsx')
set.seed(44)
k1 <- kmeans(df, centers = 10, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df)
dataFinal <- dfsinservicio |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
count(dataFinal[which(dataFinal$cluster == 6),])
count(dataFinal[which(dataFinal$cluster == 7),])
count(dataFinal[which(dataFinal$cluster == 8),])
count(dataFinal[which(dataFinal$cluster == 9),])
count(dataFinal[which(dataFinal$cluster == 10),])
dataFinal <- dataFinal |>
mutate(grupo = ifelse(cluster == 1 | cluster == 2 | cluster == 6 | cluster == 7 | cluster == 8 | cluster == 10, "G4",
ifelse(cluster == 3, "G2",
ifelse(cluster == 4 , "G3",
ifelse(cluster == 5 | cluster == 9, "G1", "G1")))))
dataFinal <- dataFinal |>
mutate(periodo = ifelse(grupo == "G1", "1-2 años",
ifelse(grupo == "G2", "3-4 años",
ifelse(grupo == "G3", "5-6 años",
ifelse(grupo == "G4", "7-8 años", "1-2 años")))))
# Number sities Group 1
nrow(dataFinal |> filter(grupo == "G1"))
# Number sities Group 2
nrow(dataFinal |> filter(grupo == "G2"))
# Number sities Group 3
nrow(dataFinal |> filter(grupo == "G3"))
# Number sities Group 4
nrow(dataFinal |> filter(grupo == "G4"))
dataFinal <- dataFinal |> select(-c(8, 12))
#Export tibble witout mobile service telecom
writexl::write_xlsx(dataFinal, './ResultadosExpansión/sinservicioClasificado.xlsx')
View(dataFinal)
G1 <- dataFinal |> filter(grupo == "G1")
View(G1)
G1 <- dataFinal |> filter(grupo == "G1")
sum(G1$cuentasInt)
sum(G1$lineStf)
sum(G1$pob2022)
G1 <- dataFinal |> filter(grupo == "G1")
sum(G1$cuentasInt)
sum(G1$lineStf)
sum(G1$pob2022)
G2 <- dataFinal |> filter(grupo == "G2")
sum(G2$cuentasInt)
sum(G2$lineStf)
sum(G2$pob2022)
G3 <- dataFinal |> filter(grupo == "G3")
sum(G3$cuentasInt)
sum(G3$lineStf)
sum(G3$pob2022)
G4 <- dataFinal |> filter(grupo == "G4")
sum(G4$cuentasInt)
sum(G4$lineStf)
sum(G4$pob2022)
G1 <- dataFinal |> filter(grupo == "G1")
sum(G1$cuentasInt)
sum(G1$lineStf)
sum(G1$pob2022)
G2 <- dataFinal |> filter(grupo == "G2")
sum(G2$cuentasInt)
sum(G2$lineStf)
sum(G2$pob2022)
G3 <- dataFinal |> filter(grupo == "G3")
sum(G3$cuentasInt)
sum(G3$lineStf)
sum(G3$pob2022)
G4 <- dataFinal |> filter(grupo == "G4")
sum(G4$cuentasInt)
sum(G4$lineStf)
sum(G4$pob2022)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
dataFinal |> group_by(grupo) |>
summarise(
Grupo = sum(grupo)
)
View(dataFinal)
dataFinal |> group_by(grupo) |>
summarise(
Grupo = count(grupo)
)
dataFinal |> group_by(grupo)
dataFinal |> group_by(grupo) |>
summarise(grupo = n())
dataFinal |> group_by(cuentasInt, grupo) |>
summarise(grupo = n())
dataFinal |> group_by(cuentasInt, grupo) |>
summarise(cuentasInt = n(), grupo = n())
dataFinal |> group_by(cuentasInt, grupo) |>
summarise(cuentasInt = sum(cuentasInt), grupo = n())
dataFinal |> group_by_all() |>
summarise(grupo = n())
dataFinal |> group_by(grupo) |>
summarise(grupo = n())
dataFinal |> group_by(grupo, pob2022) |>
summarise(grupo = n())
resumen <- dataFinal |> group_by(grupo, pob2022) |>
summarise(grupo = n())
View(resumen)
resumen <- dataFinal |> group_by(grupo, pob2022) |>
summarise(
grupo = n(),
pob2022 = sum(pob2022)
)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
grupo = n(),
pob2022 = sum(pob2022)
)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
)
G1 <- dataFinal |> filter(grupo == "G1")
sum(G1$cuentasInt)
sum(G1$lineStf)
sum(G1$pob2022)
G2 <- dataFinal |> filter(grupo == "G2")
sum(G2$cuentasInt)
sum(G2$lineStf)
sum(G2$pob2022)
G3 <- dataFinal |> filter(grupo == "G3")
sum(G3$cuentasInt)
sum(G3$lineStf)
sum(G3$pob2022)
G4 <- dataFinal |> filter(grupo == "G4")
sum(G4$cuentasInt)
sum(G4$lineStf)
sum(G4$pob2022)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Cluster = grupo,
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo)
grupo = n(),
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
) |> rename(No_Parroquias = grupo)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
grupo = n(),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf)
) |> rename(No_Parroquias = grupo)
View(resumen)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Grupo_nombre = first(grupo),
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf),
grupo = n(),
) |> rename(No_Parroquias = grupo)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf),
Grupo_nombre = first(grupo),
grupo = n(),
) |> rename(No_Parroquias = grupo)
resumen <- resumen |> mutate(prop_intFijo_pob = Cuentas_Internet_Fijo / Población)
resumen <- resumen |> mutate(
prop_intFijo_pob = (Cuentas_Internet_Fijo / Población)*100,
prop_lineasFija_pob = (Líneas_tlf_fija / Población)*100
)
G1 <- dataFinal |> filter(grupo == "G1")
sum(G1$cuentasInt)
sum(G1$lineStf)
sum(G1$pob2022)
G2 <- dataFinal |> filter(grupo == "G2")
sum(G2$cuentasInt)
sum(G2$lineStf)
sum(G2$pob2022)
G3 <- dataFinal |> filter(grupo == "G3")
sum(G3$cuentasInt)
sum(G3$lineStf)
sum(G3$pob2022)
G4 <- dataFinal |> filter(grupo == "G4")
sum(G4$cuentasInt)
sum(G4$lineStf)
sum(G4$pob2022)
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf),
Grupo_nombre = first(grupo),
grupo = n(),
) |> rename(No_Parroquias = grupo)
resumen <- resumen |> mutate(
prop_intFijo_pob = (Cuentas_Internet_Fijo / Población)*100,
prop_lineasFija_pob = (Líneas_tlf_fija / Población)*100
)
# set up the seed
set.seed(123)
#----DETERMING OPTIMAL CLUSTERS----
# Elbow Method
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
fviz_nbclust(df, kmeans, method = "wss")
#Average Silhouette Method
fviz_nbclust(df, kmeans, method = "silhouette")
#Gap Statistic Method
# compute gap statistic
set.seed(123)
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
#  According to the majority rule, the best number of clusters is  4
# adding nstart = 25 will generate 25 initial configurations.
#This approach is often recommended.
set.seed(44)
k1 <- kmeans(df, centers = 10, nstart = 25)
str(k1)
k1
fviz_cluster(k1, geom="point", data = df)
dataFinal <- dfsinservicio |> mutate(cluster = k1$cluster)
#testing
count(dataFinal[which(dataFinal$cluster == 1),])
count(dataFinal[which(dataFinal$cluster == 2),])
count(dataFinal[which(dataFinal$cluster == 3),])
count(dataFinal[which(dataFinal$cluster == 4),])
count(dataFinal[which(dataFinal$cluster == 5),])
count(dataFinal[which(dataFinal$cluster == 6),])
count(dataFinal[which(dataFinal$cluster == 7),])
count(dataFinal[which(dataFinal$cluster == 8),])
count(dataFinal[which(dataFinal$cluster == 9),])
count(dataFinal[which(dataFinal$cluster == 10),])
dataFinal <- dataFinal |>
mutate(grupo = ifelse(cluster == 1 | cluster == 2 | cluster == 6 | cluster == 7 | cluster == 8 | cluster == 10, "G4",
ifelse(cluster == 3, "G1",
ifelse(cluster == 4 , "G3",
ifelse(cluster == 5 | cluster == 9, "G2", "G1")))))
dataFinal <- dataFinal |>
mutate(periodo = ifelse(grupo == "G1", "1-2 años",
ifelse(grupo == "G2", "3-4 años",
ifelse(grupo == "G3", "5-6 años",
ifelse(grupo == "G4", "7-8 años", "1-2 años")))))
# Number sities Group 1
nrow(dataFinal |> filter(grupo == "G1"))
# Number sities Group 2
nrow(dataFinal |> filter(grupo == "G2"))
# Number sities Group 3
nrow(dataFinal |> filter(grupo == "G3"))
# Number sities Group 4
nrow(dataFinal |> filter(grupo == "G4"))
dataFinal <- dataFinal |> select(-c(8, 12))
#Export tibble witout mobile service telecom
writexl::write_xlsx(dataFinal, './ResultadosExpansión/sinservicioClasificado.xlsx')
resumen <- dataFinal |> group_by(grupo) |>
summarise(
Población = sum(pob2022),
Cuentas_Internet_Fijo = sum(cuentasInt),
Líneas_tlf_fija = sum(lineStf),
Grupo_nombre = first(grupo),
grupo = n(),
) |> rename(No_Parroquias = grupo)
resumen <- resumen |> mutate(
prop_intFijo_pob = (Cuentas_Internet_Fijo / Población)*100,
prop_lineasFija_pob = (Líneas_tlf_fija / Población)*100
)
resumen <- resumen |> mutate(
porc_intFijo_pob = (Cuentas_Internet_Fijo / Población)*100,
porc_lineasFija_pob = (Líneas_tlf_fija / Población)*100
)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
View(resumen)
sum(resumen$No_Parroquias)
View(resumen)
View(resumen)
source("C:/Users/bravi/projects/expansionSMAr/sinServicioSMA2.R", echo=TRUE)
View(df.total)
View(df.pob2022)
View(df.total)
nrow(df.total |> filter(!is.na(DPA_DESPARURB)))
nrow(df.total |> filter(TIPO != 'URBANO'))
total.parroquias <- nrow(df.total |> filter(TIPO != 'URBANO'))
total.parroquias
nrow(df.sin2)
parroquias.con.servicio <- total.parroquias - nrow(df.sin2)
parroquias.con.servicio
nrow(df.sin2) / total.parroquias
# % without service
porc.sin.servicio <- nrow(df.sin2) / total.parroquias
porc.sin.servicio
sum(df.total$TOTAL)
df.total |> mutate(2G = CONECEL_2G + OTECEL_2G)
df.total |> mutate(DosG = CONECEL_2G + OTECEL_2G)
df.total |> mutate(2.G = CONECEL_2G + OTECEL_2G)
df.total |> mutate(rbs2G = CONECEL_2G + OTECEL_2G)
rbs2G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs2G = CONECEL_2G + OTECEL_2G) |> select(rbs2G)
View(rbs2G)
rbs2G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs2G = CONECEL_2G + OTECEL_2G) |> select(rbs2G) |>
filter(rbs2G != 0)
otal.parroquias <- nrow(df.total |> filter(TIPO != 'URBANO'))
total.parroquias
parroquias.con.servicio <- total.parroquias - nrow(df.sin2)
parroquias.con.servicio
# % without service
porc.sin.servicio <- nrow(df.sin2) / total.parroquias
porc.sin.servicio
rbs2G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs2G = CONECEL_2G + OTECEL_2G) |> select(rbs2G) |>
filter(rbs2G != 0)
rbs3G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs3G = CONECEL_3G + OTECEL_3G + CNT_3G) |> select(rbs3G) |>
filter(rbs3G != 0)
rbs4G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs4G = CONECEL_4G + OTECEL_4G + CNT_4G) |> select(rbs4G)
rbs4G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs4G = CONECEL_4G + OTECEL_4G + CNT_4G) |> select(rbs4G) |>
filter(rbs3G != 0)
rbs4G <- df.total |> filter(TIPO != 'URBANO') |>
mutate(rbs4G = CONECEL_4G + OTECEL_4G + CNT_4G) |> select(rbs4G) |>
filter(rbs4G != 0)
1042-627
1042-707
1042-648
parroquias.con.servicio
nrow(df.sin2)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
# set up the seed
set.seed(123)
#----DETERMING OPTIMAL CLUSTERS----
# Elbow Method
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(df, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
fviz_nbclust(df, kmeans, method = "wss")
#---NBUST METHOD---
set.seed(123)
res<-NbClust(df, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D", index = "all")
#Average Silhouette Method
fviz_nbclust(df, kmeans, method = "silhouette")
#Gap Statistic Method
# compute gap statistic
set.seed(123)
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25,
K.max = 10, B = 50)
# Print the result
print(gap_stat, method = "firstmax")
fviz_gap_stat(gap_stat)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
install.packages("modelsummary")
install.packages("modelsummary")
library(modelsummary)
library(modelsummary)
install.packages('modelsummary')
install.packages("modelsummary")
library(modelsummary)
library(modelsummary)
modelsummary(resumen, output = "markdown")
datasummary(resumen)
source("C:/Users/bravi/projects/expansionSMAr/ratingSinSMA.R", echo=TRUE)
datasummary_skim(resumen)
datasummary_skim(resumen)
datasummary_skim(resumen, type = "categorical")
datasummary_skim(resumen)
View(resumen)
writexl::write_xlsx(resumen, './ResultadosExpansión/resumen.xlsx')
View(resumen)
View(resumen)
View(resumen)
View(resumen)
View(df.total)
View(df.sin2)
View(dataFinal)
source("C:/Users/bravi/projects/expansionSMAr/sinServicioSMA2.R", echo=TRUE)
1042-627
415/1042
1042-707
335/1042
1042-648
394/1042
View(df.total)
